module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateLogEntry {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type LogEntry {
  id: ID!
  createdAt: DateTime!
  note: String!
  createdBy: User
}

type LogEntryConnection {
  pageInfo: PageInfo!
  edges: [LogEntryEdge]!
  aggregate: AggregateLogEntry!
}

input LogEntryCreateInput {
  id: ID
  note: String!
  createdBy: UserCreateOneWithoutLogEntriesInput
}

input LogEntryCreateManyWithoutCreatedByInput {
  create: [LogEntryCreateWithoutCreatedByInput!]
  connect: [LogEntryWhereUniqueInput!]
}

input LogEntryCreateWithoutCreatedByInput {
  id: ID
  note: String!
}

type LogEntryEdge {
  node: LogEntry!
  cursor: String!
}

enum LogEntryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  note_ASC
  note_DESC
}

type LogEntryPreviousValues {
  id: ID!
  createdAt: DateTime!
  note: String!
}

input LogEntryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  AND: [LogEntryScalarWhereInput!]
  OR: [LogEntryScalarWhereInput!]
  NOT: [LogEntryScalarWhereInput!]
}

type LogEntrySubscriptionPayload {
  mutation: MutationType!
  node: LogEntry
  updatedFields: [String!]
  previousValues: LogEntryPreviousValues
}

input LogEntrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LogEntryWhereInput
  AND: [LogEntrySubscriptionWhereInput!]
  OR: [LogEntrySubscriptionWhereInput!]
  NOT: [LogEntrySubscriptionWhereInput!]
}

input LogEntryUpdateInput {
  note: String
  createdBy: UserUpdateOneWithoutLogEntriesInput
}

input LogEntryUpdateManyDataInput {
  note: String
}

input LogEntryUpdateManyMutationInput {
  note: String
}

input LogEntryUpdateManyWithoutCreatedByInput {
  create: [LogEntryCreateWithoutCreatedByInput!]
  delete: [LogEntryWhereUniqueInput!]
  connect: [LogEntryWhereUniqueInput!]
  set: [LogEntryWhereUniqueInput!]
  disconnect: [LogEntryWhereUniqueInput!]
  update: [LogEntryUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [LogEntryUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [LogEntryScalarWhereInput!]
  updateMany: [LogEntryUpdateManyWithWhereNestedInput!]
}

input LogEntryUpdateManyWithWhereNestedInput {
  where: LogEntryScalarWhereInput!
  data: LogEntryUpdateManyDataInput!
}

input LogEntryUpdateWithoutCreatedByDataInput {
  note: String
}

input LogEntryUpdateWithWhereUniqueWithoutCreatedByInput {
  where: LogEntryWhereUniqueInput!
  data: LogEntryUpdateWithoutCreatedByDataInput!
}

input LogEntryUpsertWithWhereUniqueWithoutCreatedByInput {
  where: LogEntryWhereUniqueInput!
  update: LogEntryUpdateWithoutCreatedByDataInput!
  create: LogEntryCreateWithoutCreatedByInput!
}

input LogEntryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdBy: UserWhereInput
  AND: [LogEntryWhereInput!]
  OR: [LogEntryWhereInput!]
  NOT: [LogEntryWhereInput!]
}

input LogEntryWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLogEntry(data: LogEntryCreateInput!): LogEntry!
  updateLogEntry(data: LogEntryUpdateInput!, where: LogEntryWhereUniqueInput!): LogEntry
  updateManyLogEntries(data: LogEntryUpdateManyMutationInput!, where: LogEntryWhereInput): BatchPayload!
  upsertLogEntry(where: LogEntryWhereUniqueInput!, create: LogEntryCreateInput!, update: LogEntryUpdateInput!): LogEntry!
  deleteLogEntry(where: LogEntryWhereUniqueInput!): LogEntry
  deleteManyLogEntries(where: LogEntryWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  logEntry(where: LogEntryWhereUniqueInput!): LogEntry
  logEntries(where: LogEntryWhereInput, orderBy: LogEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LogEntry]!
  logEntriesConnection(where: LogEntryWhereInput, orderBy: LogEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LogEntryConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  logEntry(where: LogEntrySubscriptionWhereInput): LogEntrySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  logEntries(where: LogEntryWhereInput, orderBy: LogEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LogEntry!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  logEntries: LogEntryCreateManyWithoutCreatedByInput
}

input UserCreateOneWithoutLogEntriesInput {
  create: UserCreateWithoutLogEntriesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLogEntriesInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  logEntries: LogEntryUpdateManyWithoutCreatedByInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneWithoutLogEntriesInput {
  create: UserCreateWithoutLogEntriesInput
  update: UserUpdateWithoutLogEntriesDataInput
  upsert: UserUpsertWithoutLogEntriesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutLogEntriesDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutLogEntriesInput {
  update: UserUpdateWithoutLogEntriesDataInput!
  create: UserCreateWithoutLogEntriesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  logEntries_every: LogEntryWhereInput
  logEntries_some: LogEntryWhereInput
  logEntries_none: LogEntryWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    